<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dev | jmondo]]></title>
  <link href="http://jmondo.github.com/blog/categories/dev/atom.xml" rel="self"/>
  <link href="http://jmondo.github.com/"/>
  <updated>2012-12-05T23:13:16-08:00</updated>
  <id>http://jmondo.github.com/</id>
  <author>
    <name><![CDATA[John Gesimondo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Become a dev: The road to setting up and teaching yourself Ruby on Rails]]></title>
    <link href="http://jmondo.github.com/blog/become-a-dev-setting-up-and-self-teaching-rails/"/>
    <updated>2012-08-02T18:58:00-07:00</updated>
    <id>http://jmondo.github.com/blog/become-a-dev-setting-up-and-self-teaching-rails</id>
    <content type="html"><![CDATA[<p>People ask me multiple times per week - "alright John, you convinced me to learn programming, but how do I get rails on my computer?" I've sent this email to about 25 people. Check it out, with some updates especially for you, dearest blog reader.</p>

<h2>Setup</h2>

<p>You need Ruby on Rails and some dependencies (like a database, git, etc) as well as a text editor to actually write code. Here's how to install both on Mac and Windows.</p>

<h3>Ruby on Rails (mac/win)</h3>

<ol>
<li><p>Go to railsinstaller.org (download the kit)</p>

<p>   If you're having trouble getting the mac version to download, try this <a href="https://github.com/railsinstaller/railsinstaller-nix/downloads">Download page</a></p></li>
<li><p>Run the railsinstaller from step 1, defaults are fine</p></li>
<li>Open a terminal or console window and run "gem install rails" to upgrade rails if necessary</li>
</ol>


<p>Techie notes about rails installer for mac: I was wary about using this, but a friend allowed me to use his out of the box mac as a guinea pig. Turns out, it installs the stuff the same way I would have told you to do it, using gcc without the full XCode and rvm (does a system install, installs the current version of ruby and rails). As you'll learn below, it meshes well with homebrew when you need to install native dependencies down the line. So it's both geek and n00b approved. That's what makes it so awesome.</p>

<h3>Editor</h3>

<p>Sublime:
Install Sublime Text 2 for your platform from <a href="http://www.sublimetext.com/2">http://www.sublimetext.com/2</a></p>

<p>Now go make something cool!</p>

<h2>Learn, and make something cool!</h2>

<p>If you're just getting started, that project you've always wanted to make... you know, the one you couldn't find a developer to create, so now you're here hoping you're a natural? I hate to be the one to break it to you. It's not going to be that easy.</p>

<p>You should first play along with a few almost-as-cool-but-still-not-as-cool-as-your-idea tutorials. While I applaud ambition, the time you spend on these tutorials will pay off 5-10x later (like in the next few days).</p>

<p>The more perspective you gain about what you're doing, the more the things you try will "click". Make it a point to not to be a copy-paste monkey.</p>

<p>Also understand that if you're "tech savvy" this will still probably take you a few weeks to a month to get from zero to "novice programmer." But once you get over that barrier, you can build stuff! So if you're the maker type, the motivation is self perpetuating from there on in. Get through <a href="http://sethgodin.typepad.com/the_dip/">the dip</a>!</p>

<p>Here's a whole bunch of awesome resources for ruby, rails, and html/css.</p>

<h4>HTML/CSS</h4>

<p>You're coding a web app. So you should probably know how web browsers work and display content. Lots of the code you write will be HTML/CSS, so you should know the basics before you proceed. Maybe even sprinkle on some javascript here, though not necessary for beginners.</p>

<ul>
<li><a href="http://www.w3schools.com/html/">http://www.w3schools.com/html/</a></li>
<li><a href="http://htmldog.com/">http://htmldog.com/</a></li>
<li><a href="http://html5doctor.com/">http://html5doctor.com/</a> Great reference for html5 selectors and what they should be used for</li>
</ul>


<h4>Ruby</h4>

<p>Ruby is the language. Analogy: it's like learning a foreign language, say Spanish.</p>

<ul>
<li><a href="http://ruby.bastardsbook.com/">http://ruby.bastardsbook.com/</a></li>
<li><a href="http://ruby.bastardsbook.com/resources/">http://ruby.bastardsbook.com/resources/</a> (more resources)</li>
<li><a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book">http://ruby.railstutorial.org/ruby-on-rails-tutorial-book</a> - lots of cool tutorials including a twitter clone, covers zero to deployment (putting your site on the web)</li>
</ul>


<h4>Rails</h4>

<p>Rails (or 'Ruby on Rails') is the framework. Analogy: it's like learning shorthand or IM speak in Spanish. It's kind of hard to learn shorthand if you don't know the language, so you shouldn't blow right by the Ruby stuff above.</p>

<p>That being said, IM speak and shorthand only use the simple parts of the language, as does Rails, so you don't need to be an expert in Ruby to start learning Rails.</p>

<ul>
<li><a href="http://net.tutsplus.com/tutorials/ruby/the-intro-to-rails-screencast-i-wish-i-had/">http://net.tutsplus.com/tutorials/ruby/the-intro-to-rails-screencast-i-wish-i-had/</a></li>
<li><a href="http://www.codeschool.com/courses/rails-for-zombies">http://www.codeschool.com/courses/rails-for-zombies</a></li>
<li><a href="http://www.codeschool.com/courses/rails-for-zombies-2">http://www.codeschool.com/courses/rails-for-zombies-2</a></li>
<li><a href="http://pragprog.com/book/rails4/agile-web-development-with-rails">Agile Web Development With Rails</a> (a book - this is how I learned)</li>
</ul>


<p>If this tutorial doesn't work verbatim or you strongly suggest some other resources be listed, please comment below.</p>

<p>Happy learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Orderly gem: Assert sort order in acceptance tests]]></title>
    <link href="http://jmondo.github.com/blog/orderly-gem-assert-sort-order-in-acceptance-tests/"/>
    <updated>2012-07-21T20:03:00-07:00</updated>
    <id>http://jmondo.github.com/blog/orderly-gem-assert-sort-order-in-acceptance-tests</id>
    <content type="html"><![CDATA[<p>Because sometimes you just need to assert that this appears before that on a page. Like when testing sort order.</p>

<p>For more explanation, derivation, and geekery, check out my original post on the <a href="http://launchware.com/articles/acceptance-testing-asserting-sort-order">LaunchWare Blog</a> from last week!</p>

<h2>The approach</h2>

<p>There are many ways to do this, and I've tried lots of them in my work with LaunchWare. Most of them were ugly, clunky, brittle, or inefficient. Then I thought of a simple solution. Find the index (or position) of one piece of text ("this") on the page and then find the index of the other ("that") and assert like so:</p>

<pre><code>page.body.index(this).should &lt; page.body.index(that)
</code></pre>

<h2>The gem</h2>

<p>Simple enough right? So I made it into a custom rspec matcher, which I then gemified and web 2.0ified. It's called orderly and it's available at <code>gem install orderly</code> :) Also source code is on <a href="https://github.com/jmondo/orderly">Github</a> for your forking pleasure.</p>

<p>Now you can write:</p>

<pre><code>this.appears_before(that)
</code></pre>

<p>And as a bonus, it's got built in error handling if this or that aren't found on the page. It'll even tell you which one is missing.</p>

<p>Trust me, it's fun. Soon you'll be thinking <em>you know what would make this app better? Putting things in a strict, complicated order so that we stack orderly assertions on assertions on assertions</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Github downloads for private dependencies (bonus: geolocation)]]></title>
    <link href="http://jmondo.github.com/blog/using-github-downloads-for-private-dependencies-bonus-geolocation/"/>
    <updated>2012-07-16T16:00:00-07:00</updated>
    <id>http://jmondo.github.com/blog/using-github-downloads-for-private-dependencies-bonus-geolocation</id>
    <content type="html"><![CDATA[<h2>Geolocation</h2>

<p>I've been working on WhatNext, a social network for the cancer community via LaunchWare. And this week, the site got some geolocation love. After hacking together a combination of Google queries, resque jobs, and some backbone-js-HTML5 location code, we realized that we needed something instant, even if it's slightly less accurate.</p>

<p>So back to the drawing board. I spiked a research project on IP geolocation data. My findings, as officially published in the LaunchWare HipChat room:</p>

<blockquote><p>all signs point to the best professional solution being maxmind, there are others, but they're "because it's cheaper!" or "this is free check it out, it's awesome!" but that was the most accurate by my small (~20) testing sample, and seems to have been around forever. and the 'stick it to the man' services point to that as 'the man', which i think [the client] would appreciate for reliability. plus it has a gem that makes it super easy to use (though you need to compile some dependencies),</p>

<p><a href="http://www.maxmind.com/app/city">http://www.maxmind.com/app/city</a> is what we need. its $370 once and $90 for updates. and US-only database is $250 one time fee, and $61 per month of updates.</p>

<p>the gem is at <a href="https://github.com/mtodd/geoip">https://github.com/mtodd/geoip</a></p></blockquote>

<p>Using this data was a dream, so if you're looking for geolocation data for a ruby/rails project, look no further. They also have free data which is quoted as 2-3% less accurate. The only thing is, where do we store the data?</p>

<h2>Data Storage</h2>

<p>The data turned out to be 28 MB. Not something we want wasting space in our repo and slowing down deploys. We need a solution that can be quickly run on staging and production servers as well as locally for each new developer on the project. A one liner for a readme would be ideal.</p>

<p>First we thought - put the file s3 private storage. Create a rake task to pass the credentials and download the files, creating the system directories along the way if they don't already exist. Not simple enough.</p>

<p>Then <strong>Github downloads</strong> came to mind. Our repo is already private, therefore so are our files. I clicked "Downloads" in our repo and uploaded the 28 MB file with one more click.</p>

<p>Next we have to download it. Their help files make that super easy.</p>

<p><a href="https://help.github.com/articles/downloading-files-from-the-command-line">https://help.github.com/articles/downloading-files-from-the-command-line</a></p>

<p>Check it out:</p>

<pre><code>curl -u 'github username' -L -o /usr/local/share/GeoIP/GeoIPCityus.dat
</code></pre>

<p>Just type your github password when prompted. One command to download the file, put it where our app expects to find it, and create the directories along the way. We can run this command with data updates as often as we please.</p>

<p>Github continues to make life easy. I love it. Congrats on the funding by the way. And for bootstrapping it this far.</p>
]]></content>
  </entry>
  
</feed>
